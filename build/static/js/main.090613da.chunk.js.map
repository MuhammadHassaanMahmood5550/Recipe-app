{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","Recipe.module.css"],"names":["Recipe","lable","calories","image","ingredients","convert","Math","round","inc","className","style","map","cur","text","img","src","alt","App","useState","recipes","setRecipes","search","setSearch","finalSearch","setFinalSearch","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"4PAkCeA,EA/BA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAEjCC,EAAUC,KAAKC,MAAML,GACtBM,EAAM,EACT,OAEE,aADE,CACF,OAAKC,UAAU,uBAAf,SACI,qBAAKA,UAAU,MAAf,SAEI,qBAAKA,UAAU,cAAf,SACA,qBAAKA,UAAWC,IAAMV,OAAtB,SACN,sBAAKS,UAAU,wBAAf,UACI,6BAAKR,IACL,qBAAIQ,UAAU,OAAd,cAAuBL,EAAYO,KAAI,SAACC,GAAD,OACvC,+BAAKJ,IAAL,MAAc,sBAAMC,UAAU,GAAhB,SAAoBG,EAAIC,aADtC,QAGA,4CAAeR,KACf,qBAAKI,UAAWC,IAAMI,IAAKC,IAAKZ,EAAOa,IAAI,iBC4DxCC,MA3Ef,WACG,IAGA,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsCJ,mBAAS,WAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAGCC,qBAAU,WACRC,MACA,CAACH,IAMH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAjBd,WAiBc,oBAhBb,qCAeE,cACXM,EADW,gBAGEA,EAASC,OAHX,OAGXC,EAHW,OAIjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MALA,2CAAH,qDAkBlB,OACE,sBAAKvB,UAAU,MAAf,UAEA,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,6BAAf,SAEE,sBAAKA,UAAU,gBAAf,UACA,oBAAIA,UAAU,OAAd,gCACA,sBAAM0B,SAda,SAACC,GACtBA,EAAEC,iBACFb,EAAeH,GACfC,EAAU,KAWR,SACF,sBAAKb,UAAU,aAAf,UACE,uBAAOA,UAAU,eAAe6B,KAAK,OAAOC,YAAY,cACxDC,MAAOnB,EAGPoB,SAxBe,SAACL,GAClBd,EAAUc,EAAEM,OAAOF,UAyBjB,wBAAQ/B,UAAU,yDAAyD6B,KAAK,SAAhF,gCAOJ,qBAAK7B,UAAU,mBAAf,SAECU,EAAQR,KAAK,SAACC,GAAD,OAGd,aAFE,CAED,EAAD,CAA+BX,MAAOW,EAAI+B,OAAOC,MAAO1C,SAAUU,EAAI+B,OAAOzC,SAC7EC,MAAOS,EAAI+B,OAAOxC,MAAOC,YAAaQ,EAAI+B,OAAOvC,aADpCQ,EAAI+B,OAAOC,gBCxDbC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,IAAM,uB","file":"static/js/main.090613da.chunk.js","sourcesContent":["//here we just did destructuring = separate data i.r let [name, age] = [\"hassaan\", 22];\r\n//but not with [] brackets but with {} brackets\r\nimport style from \"./Recipe.module.css\";\r\nconst Recipe = ({lable, calories, image, ingredients}) => {\r\n \r\n    let convert = Math.round(calories);\r\n   let inc = 0;\r\n    return ( \r\n        // col-md-8 col-lg-6 col-sm-12 \r\n      <div className=\"container for-recipe\">\r\n          <div className=\"row\">\r\n             \r\n              <div className=\"recipe-info\">\r\n              <div className={style.Recipe}>\r\n        <div className=\"recipe pt-3 pb-5 px-3\">\r\n            <h1>{lable}</h1>\r\n            <h6 className=\"py-2\"> {ingredients.map((cur) => (\r\n            <h6>{inc++}.  <span className=\"\">{cur.text}</span></h6>  \r\n             ) )}  </h6>\r\n            <h5>Calories: {convert}</h5>\r\n            <img className={style.img} src={image} alt=\"\"/>\r\n        \r\n\r\n        </div>\r\n        </div>\r\n              </div>\r\n          </div>\r\n      </div>\r\n\r\n        \r\n     \r\n     );\r\n}\r\n \r\nexport default Recipe;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\n\nfunction App() {\n   const appli_id = \"47c59721\";\n   const appli_key = \"a15fab02b79e1d5fc4fbd579b66635dd\";\n   //useState([]); = empty array\n   const [recipes, setRecipes] = useState([]);\n   const [search, setSearch] = useState(\"\");\n   const [finalSearch, setFinalSearch] = useState(\"chicken\");\n\n      \n    useEffect(() => {\n      getRecipes();\n    },[finalSearch])\n\n    //as we know to fetch data we use asynchronous javascript like fetch().then.....\n    //but there is a easy way async await. await = use where ever the data wont come \n    //instantly, it may need few second to request and fetch.\n    \n    const getRecipes = async () => {\n      const response = await fetch(`https://api.edamam.com/search?q=${finalSearch}&app_id=${appli_id}&app_key=${appli_key}`);\n      //now as we know we can't get data into javascript format so conver data into json fromat = similler to javascript object syntex.\n      const data = await response.json();\n      setRecipes(data.hits);\n      console.log(data.hits); \n    }\n\n    const function01 = (e) => {\n      setSearch(e.target.value);\n    }\n\n    const forFinalSearch = (e) => {\n      e.preventDefault();\n      setFinalSearch(search);\n      setSearch(\"\");\n    }\n\n  return (\n    <div className=\"App\">\n   \n    <div className=\"container mb-0\">\n      <div className=\"row justify-content-center\">\n        \n        <div className=\"col-md-4 mt-4\">\n        <h2 className=\"mb-3\">Search For Recipes</h2>\n        <form onSubmit={forFinalSearch}>\n      <div className=\"form-group\">\n        <input className=\"form-control\" type=\"text\" placeholder=\"Search here\" \n        value={search}\n        // onChange={(e) => setSearch(e.target.value)}\n        //------------or\n        onChange={function01}\n        />\n        <button className=\"btn btn-outline-dark btn-md mt-3 mb-2 font-weight-bold\" type=\"submit\">Search</button>\n      </div>\n      </form> \n        </div>\n      </div>\n    </div>\n\n    <div className=\"recipe-container\">\n\n    {recipes.map( (cur) => ( \n      //key = just to remove error bcz it is just a stupid question by javascript to \n      // recognize each cur element shoud have a unique key for manipulation if required \n    <Recipe key={cur.recipe.label} lable={cur.recipe.label} calories={cur.recipe.calories}\n    image={cur.recipe.image} ingredients={cur.recipe.ingredients}>\n    </Recipe> \n    ) )}\n\n</div>\n   \n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Recipe\":\"Recipe_Recipe__3WY9v\",\"img\":\"Recipe_img__AkGvQ\"};"],"sourceRoot":""}